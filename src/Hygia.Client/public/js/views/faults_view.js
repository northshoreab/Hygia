// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['chaplin', 'views/base/collection_view', 'views/fault_view', 'text!templates/faults.hbs'], function(Chaplin, CollectionView, FaultView, template) {
    'use strict';

    var FaultsView;
    return FaultsView = (function(_super) {

      __extends(FaultsView, _super);

      function FaultsView() {
        return FaultsView.__super__.constructor.apply(this, arguments);
      }

      FaultsView.prototype.template = template;

      template = null;

      FaultsView.prototype.tagName = 'div';

      FaultsView.prototype.id = 'faults';

      FaultsView.prototype.container = '#main';

      FaultsView.prototype.listSelector = 'ol';

      FaultsView.prototype.fallbackSelector = '.fallback';

      FaultsView.prototype.loadingSelector = '.loading';

      FaultsView.prototype.initialize = function() {
        return FaultsView.__super__.initialize.apply(this, arguments);
      };

      FaultsView.prototype.getView = function(item) {
        return new FaultView({
          model: item
        });
      };

      FaultsView.prototype.render = function() {
        console.log('render faults');
        return FaultsView.__super__.render.apply(this, arguments);
      };

      return FaultsView;

    })(CollectionView);
  });

}).call(this);
