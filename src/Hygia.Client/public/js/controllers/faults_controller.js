// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['chaplin', 'models/fault', 'models/faults', 'controllers/base/controller', 'views/faults_view'], function(Chaplin, Fault, Faults, Controller, FaultsView) {
    'use strict';

    var FaultsController;
    return FaultsController = (function(_super) {

      __extends(FaultsController, _super);

      function FaultsController() {
        this.historyURL = __bind(this.historyURL, this);
        return FaultsController.__super__.constructor.apply(this, arguments);
      }

      FaultsController.prototype.title = 'Fault Management';

      FaultsController.prototype.historyURL = function(params) {
        var path;
        path = this["arguments"].callee.name.replace('Controller', '');
        if (params.id) {
          return "" + path + "/" + params.id;
        } else {
          return '';
        }
      };

      FaultsController.prototype.index = function(params) {
        this.faults = new Faults();
        return this.view = new FaultsView({
          collection: this.faults
        });
      };

      FaultsController.prototype.show = function(params) {
        this.fault = new Fault({
          id: params.id
        }, {
          loadDetails: true
        });
        return this.view = new FaultView({
          model: this.fault
        });
      };

      return FaultsController;

    })(Controller);
  });

}).call(this);
